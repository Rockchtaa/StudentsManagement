@page "/edit-student/{id:int}"

@using Microsoft.AspNetCore.Authorization
@using StudentManagamentShared.Models
@using StudentsManagement.Client.Services
@using StudentsManagement.Shared.Models
@rendermode InteractiveAuto
@inject NavigationManager NavigationManager
@inject IStudentRepository studentService
@inject ICountryRepository CountryService


<h3>Update New Student</h3>

<hr />
<div class="row mt-4">
    <div class="col-md-12">
        <div class="card shadow-sm border-0">
            <div class="card-header bg-primary text-white">
                <h3 class="card-title m-0">Update Student</h3>
            </div>
            <div class="card-body p-4">
                <EditForm Model="@studobj" OnValidSubmit="@UpdateStudent" FormName="UpdateStudentForm" class="needs-validation">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />

                    <div class="row">
                        <!-- First Name -->
                        <div class="col-md-6 mb-3">
                            <div class="form-group">
                                <label for="firstName" class="form-label">First Name</label>
                                <InputText id="firstName" class="form-control" @bind-Value="@studobj.FirstName" />
                                <ValidationMessage for="() => studobj.FirstName" class="text-danger small" />
                            </div>
                        </div>

                        <!-- Last Name -->
                        <div class="col-md-6 mb-3">
                            <div class="form-group">
                                <label for="lastName" class="form-label">Last Name</label>
                                <InputText id="lastName" class="form-control" @bind-Value="@studobj.LastName" />
                                <ValidationMessage for="() => studobj.LastName" class="text-danger small" />
                            </div>
                        </div>

                        <!-- Email -->
                        <div class="col-md-6 mb-3">
                            <div class="form-group">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="@studobj.EmailAddress" />
                                <ValidationMessage for="() => studobj.EmailAddress" class="text-danger small" />
                            </div>
                        </div>

                        <!-- Phone -->
                        <div class="col-md-6 mb-3">
                            <div class="form-group">
                                <label for="phone" class="form-label">Phone</label>
                                <InputText id="phone" class="form-control" @bind-Value="@studobj.PhoneNumber" />
                                <ValidationMessage for="() => studobj.PhoneNumber" class="text-danger small" />
                            </div>
                        </div>

                        <!-- Address -->
                        <div class="col-md-6 mb-3">
                            <div class="form-group">
                                <label for="address" class="form-label">Address</label>
                                <InputText id="address" class="form-control" @bind-Value="@studobj.Address" />
                                <ValidationMessage for="() => studobj.Address" class="text-danger small" />
                            </div>
                        </div>

                        <!-- Country -->
                        <div class="col-md-6 mb-3">
                            <div class="form-group">
                                <label for="country" class="form-label">Country</label>
                                <InputSelect id="country" class="form-select" @bind-Value="@studobj.Country">
                                    <option value="">Select Country</option>
                                    @foreach (var country in Countrylist)
                                    {
                                        <option value="@country.Name">@country.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage for="() => studobj.Country" class="text-danger small" />
                            </div>
                        </div>
                    </div>

                    <!-- Buttons -->
                    <div class="d-flex justify-content-end gap-2 mt-4">
                        <button type="submit" class="btn btn-primary">Save Student</button>
                        <button type="button" @onclick="Cancel" class="btn btn-danger">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

    @code {
        [SupplyParameterFromForm]
        public Student studobj { get; set; } = new Student();

        [Parameter]
        public int id { get; set; }

        List<Country> Countrylist = new List<Country>();




        protected override async Task OnInitializedAsync()
        {
            studobj = await studentService.GetStudentByIdAsync(id);
            Countrylist = await CountryService.GetCountriesAsync();

        }

        protected async Task UpdateStudent()
        {
            var result = await studentService.UpdateStudentAsync(studobj);

            NavigationManager.NavigateTo("/studentlist");

        }

        protected void Cancel()
        {
            NavigationManager.NavigateTo("/studentlist");
        }

    }



